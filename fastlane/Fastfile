# -*- mode: ruby -*-


require 'yaml'


def config(key, defval = nil)
  $config ||= YAML.load_file(File.expand_path '../config.yml', __dir__) rescue {}
  key = key.to_s.upcase
  ENV[key] or $config[key] or defval or raise "missing #{key}"
end

def project()
  "#{config :app_name}.xcodeproj"
end

def workspace()
  "#{config :app_name}.xcworkspace"
end


default_platform(:ios)

platform :ios do
  lane :setup_code_signing do
    type     = config :match_type, 'Development'
    identity = type == 'Development' ? type : 'Distribution'
    update_code_signing_settings(
      path:                  project,
      team_id:               config(:team_id),
      code_sign_identity:    "Apple #{identity}",
      profile_name:          "match #{type} #{config :app_id}",
      use_automatic_signing: false)
  end

  match_params = -> {{
    team_id:        config(:team_id),
    app_identifier: config(:app_id),
    git_url:        config(:certs_url),
    git_branch:     config(:app_name)
  }}

  lane :match_update do
    %w[development adhoc appstore].each do |type|
      sync_code_signing type: type, **match_params.call
    end
  end

  lane :match_fetch do
    %w[development adhoc appstore].each do |type|
      sync_code_signing type: type, **match_params.call, readonly: true
    end
  end

  lane :match_delete do
    %w[development distribution].each do |type|
      match_nuke(type: type)
    end
  end

  upload_params = -> {{
    apple_id:       config(:apple_id),
    itc_team_id:    config(:itc_team_id),
    team_id:        config(:team_id),
    app_identifier: config(:app_id)
  }}

  desc "Upload to TestFlight"
  lane :release_testflight do
    params = upload_params.call
    params.update({changelog: config(:changelog)})

    sync_code_signing type: 'appstore', readonly: true, **match_params.call
    build_app workspace: workspace, scheme: config(:app_name)
    upload_to_testflight **params
  end
end
